AOP, Aspect Oriented Programming

- 관점 지향 프로그래밍
- 생산 & 유지 보수성 향상을 위한 기법
- 주업무와 보조업무를 분리시켜 각각의 업무를 관리하는 기법

AOP 용어
1. Core Concern
	- 주업무
	- 주 관심사
	
2. Cross-Cutting Concern
	- 보조업무
	- 횡단 관심사
	- 인증 처리, 예외 처리, 로깅, 트랜잭션 등..
	 
3. Advice
	- 보조 업무가 주 업무 실행 중 어느 시점에서 개입해서 실행 할 지에 대한 정의
	- 보조 업무의 순서 정의
	- 보조 업무는 주 업무와 종속적인 관계를 맺으면 안된다.
	
	a. Before
		- before advice
		- 주업무를 실행하기 전에 보조업무를 실행한다.
		- 보조업무 실행 -> 주업무 실행
		
	b. After
		- 주업무를 실행한 후에 보조업무를 실행한다.
		- 주업무 실행 -> 보조업무 실행
		
	c. After-returning
		- 주 업무를 실행한 후에 주 업무의 반환값을 사용하는 보조업무를 실행한다.
		
	d. After-throwing
	 	- 주 업무를 실행 중 예외가 발생했을 때 보조업무를 실행한다. (catch같은 느낌)
	 	
	e. Around
		- 주업무를 실행하기 전후로 보조업무를 실행한다.
		- Before + After
		- 보조 업무 실행 -> 주업무 실행 -> 보조업무 실행
		
	주로 a, b 많이 사용
4. Join Point

5. Point cut

6. weaving

7. Proxy

패키지: "com.test.spring.aop"

업무
- 콘솔 프로젝트
- 주제: 메모장
- AOP 적용

구현 기능(주 업무)
1. 메모쓰기
2. 메모읽기
3. 메모수정
4. 메모삭제

구현 기능(보조업무)
1. 로그기능


파일 생성
1. 클래스
	- Main.java	//메인 클래스
	- Memo.java //주업무 클래스
	-----------------------------
	- Logger.java //로그 클래스
	-----------------------------
	- memo.xml //스프링 설정 파일(DI + AOP)
